{
  "_from": "promise-mysql@^3.3.2",
  "_id": "promise-mysql@3.3.2",
  "_inBundle": false,
  "_integrity": "sha512-b0Ew/FB33JXKdIEtExs9GuPTtTD29ABrIMSJlzakSL8AuiM+yLXIshc9lOY28+M3bNNXGNPllTWM/gDQ9FM+7g==",
  "_location": "/promise-mysql",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "promise-mysql",
    "fetchSpec": "^3.3.2",
    "name": "promise-mysql",
    "raw": "promise-mysql@^3.3.2",
    "rawSpec": "^3.3.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/promise-mysql/-/promise-mysql-3.3.2.tgz",
  "_shasum": "c98dc75794dac7f8b94a3e51808a4f63984a4dd8",
  "_shrinkwrap": null,
  "_spec": "promise-mysql@^3.3.2",
  "_where": "C:\\Users\\PedroMendoza\\Documents\\control-deudores\\server",
  "author": {
    "name": "Luke Bonaccorsi"
  },
  "bugs": {
    "url": "https://github.com/lukeb-uk/node-promise-mysql/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/bluebird": "^3.5.26",
    "@types/mysql": "^2.15.2",
    "bluebird": "^3.5.0",
    "mysql": "^2.17.1"
  },
  "deprecated": false,
  "description": "A bluebird wrapper for node-mysql",
  "devDependencies": {
    "chai": "^4.0.1",
    "mocha": "^6.1.4"
  },
  "homepage": "https://github.com/lukeb-uk/node-promise-mysql#readme",
  "keywords": [
    "async",
    "await",
    "bluebird",
    "database",
    "deferred",
    "deferreds",
    "dsl",
    "flow control",
    "fluent interface",
    "future",
    "mysql",
    "mysql-promise",
    "performance",
    "promise",
    "promises",
    "promises-a",
    "promises-aplus",
    "q"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "promise-mysql",
  "optionalDependencies": {},
  "readme": "Promise-mysql\n==================\n[![Build Status](https://travis-ci.org/lukeb-uk/node-promise-mysql.svg?style=flat&branch=master)](https://travis-ci.org/lukeb-uk/node-promise-mysql?branch=master)\n\nPromise-mysql is a wrapper for [mysqljs/mysql](https://github.com/mysqljs/mysql) that wraps function calls with [Bluebird](https://github.com/petkaantonov/bluebird/) promises. Usually this would be done with Bluebird's `.promisifyAll()` method, but mysqljs/mysql's footprint is different to that of what Bluebird expects.\n\nTo install promise-mysql, use [npm](http://github.com/isaacs/npm):\n\n```bash\n$ npm install promise-mysql\n```\n\nPlease refer to [mysqljs/mysql](https://github.com/mysqljs/mysql) for documentation on how to use the mysql functions and refer to [Bluebird](https://github.com/petkaantonov/bluebird/) for documentation on Bluebird's promises\n\nAt the minute only the standard connection (using `.createConnection()`) and the pool (using `.createPool()`) is supported. `createPoolCluster` is not implemented yet.\n\n## Examples\n\n### Connection\n\n**Important note: don't forget to call connection.end() when you're finished otherwise the Node process won't finish**\n\nTo connect, you simply call `.createConnection()` like you would on mysqljs/mysql:\n```javascript\nvar mysql = require('promise-mysql');\n\nmysql.createConnection({\n    host: 'localhost',\n    user: 'sauron',\n    password: 'theonetruering',\n    database: 'mordor'\n}).then(function(conn){\n    // do stuff with conn\n    conn.end();\n});\n```\n\nTo use the promise, you call the methods as you would if you were just using mysqljs/mysql, minus the callback. You then add a .then() with your function in:\n```javascript\nvar mysql = require('promise-mysql');\n\nmysql.createConnection({\n    host: 'localhost',\n    user: 'sauron',\n    password: 'theonetruering',\n    database: 'mordor'\n}).then(function(conn){\n    var result = conn.query('select `name` from hobbits');\n    conn.end();\n    return result;\n}).then(function(rows){\n    // Logs out a list of hobbits\n    console.log(rows);\n});\n```\n\nYou can even chain the promises, using a return within the .then():\n```javascript\nvar mysql = require('promise-mysql');\nvar connection;\n\nmysql.createConnection({\n    host: 'localhost',\n    user: 'sauron',\n    password: 'theonetruering',\n    database: 'mordor'\n}).then(function(conn){\n    connection = conn;\n    return connection.query('select `id` from hobbits where `name`=\"frodo\"');\n}).then(function(rows){\n    // Query the items for a ring that Frodo owns.\n    var result = connection.query('select * from items where `owner`=\"' + rows[0].id + '\" and `name`=\"ring\"');\n    connection.end();\n    return result;\n}).then(function(rows){\n    // Logs out a ring that Frodo owns\n    console.log(rows);\n});\n```\n\nYou can catch errors using the .catch() method. You can still add .then() clauses, they'll just get skipped if there's an error\n```javascript\nvar mysql = require('promise-mysql');\nvar connection;\n\nmysql.createConnection({\n    host: 'localhost',\n    user: 'sauron',\n    password: 'theonetruering',\n    database: 'mordor'\n}).then(function(conn){\n    connection = conn;\n    return connection.query('select * from tablethatdoesnotexist');\n}).then(function(){\n    var result = connection.query('select * from hobbits');\n    connection.end();\n    return result;\n}).catch(function(error){\n    if (connection && connection.end) connection.end();\n    //logs out the error\n    console.log(error);\n});\n\n```\n\n### Pool\n\nUse pool directly:\n\n```javascript\npool = mysql.createPool({\n  host: 'localhost',\n  user: 'sauron',\n  password: 'theonetruering',\n  database: 'mordor',\n  connectionLimit: 10\n});\n\npool.query('select `name` from hobbits').then(function(rows){\n    // Logs out a list of hobbits\n    console.log(rows);\n});\n\n```\n\nGet a connection from the pool:\n\n```javascript\npool.getConnection().then(function(connection) {\n    connection.query('select `name` from hobbits').then(...)\n}).catch(function(err) {\n    done(err);\n});\n```\n\n#### Using/Disposer Pattern with Pool\nExample implementing a using/disposer pattern using Bluebird's built-in `using` and `disposer` functions.\n\ndatabaseConnection.js:\n```javascript\nvar mysql = require('promise-mysql');\n\npool = mysql.createPool({\n  host: 'localhost',\n  user: 'sauron',\n  password: 'theonetruering',\n  database: 'mordor',\n  connectionLimit: 10\n});\n\nfunction getSqlConnection() {\n  return pool.getConnection().disposer(function(connection) {\n    pool.releaseConnection(connection);\n  });\n}\n\nmodule.exports = getSqlConnection;\n```\n\nsqlQuery.js:\n```javascript\nvar Promise = require(\"bluebird\");\nvar getSqlConnection = require('./databaseConnection');\nPromise.using(getSqlConnection(), function(connection) {\n    return connection.query('select `name` from hobbits').then(function(rows) {\n      return console.log(rows);\n    }).catch(function(error) {\n      console.log(error);\n    });\n})\n```\n\n\n## Tests\n\nAt the moment only simple basics tests are implemented using Mocha.\nTo run the tests, you need to connect to a running MySQL server. A database or write permissions are not required.\n\nIf you have docker, you can run a docker container bound to the mysql port with the command:\n```bash\ndocker run -p 3306:3306 --name mysql_container -e MYSQL_ROOT_PASSWORD=password -d mysql\n```\n\nStart the test suite with\n\n```bash\nDB_HOST=localhost DB_USER=user DB_PWD=pwd npm test\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Luke Bonaccorsi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lukeb-uk/node-promise-mysql.git"
  },
  "scripts": {
    "test": "mocha --exit"
  },
  "version": "3.3.2"
}
